---
import MainContent from '../components/MainContent.astro'
import PageHeader from '../components/text/PageHeader.astro'
import Layout from '../layouts/Layout.astro'
import { albumData } from '../sanity/albumData'
---

<Layout title="Robby Webb | Discography">
  <MainContent>
    <PageHeader text="Discography" />
    <section id="discography" class="discography"></section>
    <button class="load-more site-cta button">Load More</button>
  </MainContent>
</Layout>

<style is:inline>
  .discography {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 2rem;
    text-align: center;
    margin-bottom: 2rem;
    min-height: 100vh;
  }

  @media (min-width: 1024px) {
    .discography {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  .discography-album {
    position: relative;
  }

  .discography-album figure {
    width: 100%;
    margin: auto;
  }

  .discography-album-scrim {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    color: var(--color-black);
    background-color: var(--color-pink-faded);
    border-radius: var(--border-radius);
    transition: opacity var(--transition-normal);
  }

  .discography-album a:hover .discography-album-scrim {
    opacity: 1;
  }

  .discography-album-scrim h2 {
    font-size: clamp(var(--size-sm), 5vw, var(--size-md));
    padding: 1rem;
  }

  .load-more {
    margin: auto;
  }

  .load-more.disabled {
    pointer-events: none;
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>

<script define:vars={{ albumData }}>
  document.addEventListener(
    'astro:page-load',
    () => {
      // Grab necessary DOM elements
      const discography = document.querySelector('.discography')
      const loadMoreButton = document.querySelector('.load-more')
      const discographyNavLinks = document.querySelectorAll('a[href^="/discography"]')

      // Set pagination data
      const albumLimit = albumData.length
      const albumIncrease = 16
      const pageCount = Math.ceil(albumLimit / albumIncrease)
      let currentPage = 1

      /**
       * Create album with image, artist, record, and slug
       * @param {Object} album
       * @returns {String} Album HTML template string
       */
      function createAlbum(album) {
        const { image, artist, title, slug } = album

        return `
          <article class="discography-album">
            <a href="/discography/${slug}">
              <figure>
                <img
                  src="${image}"
                  title="${artist.name}, ${title}"
                  alt="${artist.name}, ${title} album cover"
                />
                <figcaption class="discography-album-scrim">
                  <h2>${artist.name} "${title}"</h2>
                </figcaption>
              </figure>
            </a>
          </article>
        `
      }

      /**
       * Load and append albums to the DOM based on the current page
       * @param {Number} page
       */
      function loadAlbums(page) {
        const start = (page - 1) * albumIncrease
        const end = start + albumIncrease
        const albums = albumData.slice(start, end)

        albums.forEach((album) => {
          discography.innerHTML += createAlbum(album)
        })
      }

      /**
       * Increase the number of albums displayed
       *
       * Disable the load more button when all albums are displayed
       */
      function increaseAlbums() {
        currentPage++

        loadAlbums(currentPage)

        if (currentPage >= pageCount) {
          loadMoreButton.classList.add('disabled')
          return
        }
      }

      // Load initial albums
      loadAlbums(currentPage)

      // Load more albums
      loadMoreButton.addEventListener('click', increaseAlbums)

      // [Edge Case] If user clicks on a discography link while on the discography page, reload the page
      discographyNavLinks.forEach((link) => link.addEventListener('click', () => location.reload()))
    },
    { once: true }
  )
</script>
